<!--This file is part of Captiz.

Captiz is free software: you can redistribute it and/or modify
it under the terms of the Affero GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Captiz is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
Affero GNU General Public License for more details.

You should have received a copy of the Affero GNU General Public License
along with Captiz.  If not, see <http://www.gnu.org/licenses/>.-->

{>"layouts/master"/}

{<services_menu}active{/services_menu}

{@eq key=convert value="convert"}
	{<title}Convert{/title}
{:else}
	{<title}Add timecodes{/title}
{/eq}

{<custom_css}
{/custom_css}

{<sidebar}
{/sidebar}

{<body_header}
<h1>
  Services
</h1>
<ol class="breadcrumb">
  <li><a href="#"><i class="fa fa-gear"></i> Services</a></li>
</ol>
{/body_header}

{<body}
<div class="row">
	<div class="col-md-12">
		<div class="box">
			<div class="box-header with-border">
				{@eq key=convert value="convert"}
					<h3 class="box-title">Convert a File</h3>
				{:else}
					<h3 class="box-title">Upload timecodes file</h3>
				{/eq}
			</div><!-- /.box-header -->
			<div class="box-body">
				<input name="timecodeFile" id="timecodeFile" type="file" />
			</div><!-- /.box-body -->
		</div><!-- /.box -->
	</div>
</div>

<div class="row" id="row_analysis" style="display:none">
	<div class="col-md-12">
		<div class="box">
			<div class="box-header with-border">
				<h3 class="box-title">File analysis</h3>
			</div><!-- /.box-header -->
			<div class="box-body">
				<div id="info_csv_div" style="display:none">
					<label>Please precise which field is Timecode start, Timecode end and the transcription</label><br>
				</div>
				<table class="table table-striped table-hover ">
					<thead>
						<tr>
						</tr>
					</thead>
					<tbody>

					</tbody>
				</table>

				{@eq key=convert value="import"}
					<div class="row form-group">
			            <label for="inputLang" class="col-lg-2 control-label">Transcription language</label>
			            <div class="col-lg-3">
			              <select name="lang" id="inputLang" class="form-control">
			                <option value="">Select language</option>
			                <option value="French">French</option>
			                <option value="English">English</option>
							<option value="Italian">Italian</option>
			                <option value="Spanish">Spanish</option>
			              </select>
			            </div>
			        </div>
		        {/eq}

		        {@eq key=convert value="convert"}
					<div id="delimiter_select_div" style="display:none"><br />
						<label>Which timecode format do you want ?</label><br>
						<select class="form-control" id="delimiter_select">
							<option value=".">Hours:Minutes:Seconds.Milliseconds</option>
	                		<option value=",">Hours:Minutes:Seconds,Milliseconds</option>
						</select>
					</div>
				{/eq}

				<div class="row">
					<div class="col-md-12"><br />
						<button id="submit_convert" class="btn btn-primary btn-lg">Save configuration</button>
					</div>
				</div>
			</div><!-- /.box-body -->
		</div><!-- /.box -->
	</div>
</div>
{/body}

{<custom_js}
<script src="{base_url}js/3rd/papaparse.min.js"></script>
<script src="{base_url}js/3rd/srt.parser.min.js"></script>

<script type="text/javascript">

function select_type(i) {
	if("{convert}" == "convert"){
		return '<select class="form-control select_csv" id="'+i+'">'+
		'<option value=""></option>'+
		'<option value="timecodestart">Timecode start</option>'+
		'<option value="timecodeend">Timecode end</option>'+
		'<option value="transcription">Transcription</option></select>';
	}
	else if("{convert}" == "import"){
			return '<select class="form-control select_csv" id="'+i+'">'+
			'<option value=""></option>'+
			'<option value="timecodestart">Timecode start</option>'+
			'<option value="timecodeend">Timecode end</option>'+
			'<option value="character">Character name</option>'+
			'<option value="transcription">Transcription</option>'+
			'</select>';
	}
}

function launch_download(data) {

	var form = document.createElement("form");
	form.method = 'post';
	form.action = "{base_url}services/convert";

	var input = document.createElement('input');
	input.type = "hidden";
	input.name = "data";
	input.value = JSON.stringify(data);

	form.appendChild(input);
	$("body").append(form);
	form.submit();
}

function update_table(data){
	$("thead > tr").html("<th>#</th>");
	for(var i=0;i<data[0].length;i++){
		$("thead > tr").append("<th>"+select_type(i)+"</th>");
	}

	$("tbody").html("");
	for(var i=0;i<data.length&&i<5;i++){
		var str="<tr><td>"+(i+1)+"</td>";
		for(var j=0;j<data[i].length;j++){
			str+="<td>"+data[i][j]+"</td>"
		}
		str+="</tr>";
		$("tbody").append(str);
	}

	$(".select_csv").change(function(event) {
		var text_selected = $(this).val();
		$(".select_csv").not(this).each( function(){
			if(text_selected == $(this).val())
			{
				$(this).children('option[value=""]').prop('selected', true);
			}
		});
	});
}

function send_data(timecodestart_col, timecodeend_col, transcription_col, character_col, transcription_lang, data) {

	var ajaxdata = {
		timecodestart_col: timecodestart_col,
		timecodeend_col: timecodeend_col,
		transcription_col: transcription_col,
		character_col: character_col,
		transcription_lang: transcription_lang,
		data: data
	};

	console.log(detx_startat);

	if(detx_startat!=null){
		ajaxdata.start_at = detx_startat;
	}

	console.log(ajaxdata);

	$.ajax({
		url : '{base_url}project/{project_id}/timecodes',
		type : 'POST',
		data : JSON.stringify(ajaxdata),
		dataType : 'json',
		contentType: "application/json",
		success: function (data) {
			console.log(data);
			window.location.replace("{base_url}project/{project_id}/display");
		},
		error: function (error) {
			var x = error;
		}
	});
}

var parse_csv_retries = 0;
function parseCSV(_delimiter){
	var delimiter = _delimiter || "";

	$('#timecodeFile').parse({
		config: {
			delimiter: delimiter,
			complete:  function(results, file){
				csv_data = results.data;
				if(typeof csv_data[0] == 'undefined' || (csv_data[0].length<3 && parse_csv_retries>0) )
				{
					$.notification({
						content: "Error, your file is empty or have a formatting problem.",
						timeout: 5000
					});
					$("#timecodeFile").val("");
					$("#row_analysis").hide();
				}
				else if(csv_data[0].length<3) {
					parse_csv_retries++;
					if(results.meta.delimiter == ","){
						parseCSV(";");
					}
					else {
						parseCSV(",");
					}
				}
				else{
					parse_csv_retries = 0;
					update_table(csv_data);
					$("#row_analysis").slideDown();
					$("#delimiter_select_div").hide();
					$("#info_csv_div").show();
				}
			}
		},
		error: function(err, file, inputElem, reason)
		{
			console.log(err);
		},
		before: function(file, inputElem)
		{
			return {
				action: "continue",
				reason: "This file type is not available"
			}
		},
		complete: function()
		{
			if("{convert}" == "convert"){
				$("#submit_convert").text("Convert as SRT");
			}
		}
	});
}

function parseDetx(){
	if (!window.File || !window.FileReader || !window.FileList || !window.Blob) {
		alert('The File APIs are not fully supported in this browser.');
		return;
	}

	input = document.getElementById('timecodeFile');
	if (!input) {
		alert("Um, couldn't find the fileinput element.");
	}
	else if (!input.files) {
		alert("This browser doesn't seem to support the `files` property of file inputs.");
	}
	else if (!input.files[0]) {
		alert("Please select a file");
	}
	else {
		file = input.files[0];
		fr = new FileReader();
		fr.onload = function(){
			detx_data = fr.result;
			var xmlDoc = $.parseXML(detx_data);
			$xml = $(xmlDoc);

			csv_data = Array();

		 	detx_startat = $xml.find('body').find('loop').attr('timecode');

			$.when($xml.find('body').find('line').each(function(e){
				var character = $(this).attr('role');
				var text = $(this).find('text').text();
				var tc_in = $(this).find('lipsync[type="in_open"]').attr('timecode');
				var tc_out = $(this).find('lipsync[type="out_open"]').attr('timecode');
				csv_data.push([tc_in, tc_out, text, character]);
			})).done(function(){
				if(typeof csv_data[0] == 'undefined')
				{
					$.notification({
						content: "Error, your file is empty.",
						timeout: 5000
					});
					$("#timecodeFile").val("");
					$("#row_analysis").hide();
				}
				else{
					update_table(csv_data);

					$("thead > tr").html("");
					$("thead > tbody").html("");
					$("#delimiter_select_div").show();
					$("#row_analysis").slideDown();
					$("#info_csv_div").hide();
					if("{convert}" == "convert"){
						$("#submit_convert").text("Convert as CSV");
					}
				}
			});
		};
		fr.readAsText(file);
	}
}


var csv_data = null;
var srt_data = null;
var detx_data = null, detx_startat = null;

$(document).ready(function(){

	function getCsvDataFromSrt(){

		if (!window.File || !window.FileReader || !window.FileList || !window.Blob) {
				alert('The File APIs are not fully supported in this browser.');
				return false;
			}

			input = document.getElementById('timecodeFile');
			if (!input) {
				alert("Um, couldn't find the fileinput element.");
				return false;
			}
			else if (!input.files) {
				alert("This browser doesn't seem to support the `files` property of file inputs.");
				return false;
			}
			else if (!input.files[0]) {
				alert("Please select a file before clicking 'Load'");
				return false;
			}
			else {
				file = input.files[0];
				fr = new FileReader();
				fr.onload = function(){
					srt_data = parser.fromSrt(fr.result);
					csv_data = Array();
					for(var i=0;i<srt_data.length;i++){
						csv_data.push([srt_data[i].startTime, srt_data[i].endTime, srt_data[i].text]);
					}
				};
				fr.readAsText(file);
				return csv_data;
			}
	}

	$("#timecodeFile").on("change", function(){
		var name = $('#timecodeFile')[0].files[0].name;
		if(name.slice(-3)=="csv"){
			parseCSV();
		}
		else if(name.slice(-4)=="detx"){
			parseDetx();
		}
		else if(name.slice(-3)=="srt") {
			if (!window.File || !window.FileReader || !window.FileList || !window.Blob) {
				alert('The File APIs are not fully supported in this browser.');
				return;
			}

			input = document.getElementById('timecodeFile');
			if (!input) {
				alert("Um, couldn't find the fileinput element.");
			}
			else if (!input.files) {
				alert("This browser doesn't seem to support the `files` property of file inputs.");
			}
			else if (!input.files[0]) {
				alert("Please select a file");
			}
			else {
				file = input.files[0];
				fr = new FileReader();
				fr.onload = function(){
					srt_data = parser.fromSrt(fr.result);
					csv_data = Array();
					for(var i=0;i<srt_data.length;i++){
						csv_data.push([srt_data[i].startTime, srt_data[i].endTime, srt_data[i].text]);
					}

					if(typeof csv_data[0] == 'undefined')
					{
						$.notification({
							content: "Error, your file is empty.",
							timeout: 5000
						});
						$("#timecodeFile").val("");
						$("#row_analysis").hide();
					}
					else{
						update_table(csv_data);

						$("thead > tr").html("");
						$("thead > tbody").html("");
						$("#delimiter_select_div").show();
						$("#row_analysis").slideDown();
						$("#info_csv_div").hide();
						if("{convert}" == "convert"){
							$("#submit_convert").text("Convert as CSV");
						}
					}
				};
				fr.readAsText(file);
			}
		}
		else{
			alert("Wrong file extension (Only SRT or CSV)")
		}
	});

	$("#submit_convert").click(function(event) {

		if("{convert}" == "convert"){
			var name = $('#timecodeFile')[0].files[0].name;

			if(srt_data!=null){

				var postdata = {
					filename: name.slice(0, -4),
					content: csv_data,
					type: "srt",
					delimiter: $("#delimiter_select").val()
				};
				launch_download(postdata);

			}
			else if(csv_data!=null){
				var start;
				var end;
				var trans;

				$(".select_csv").each( function(){
					if($(this).children('option:selected').val() == "timecodestart"){
						start = $(this).attr("id");
					}
					else if($(this).children('option:selected').val() == "timecodeend"){
						end = $(this).attr("id");
					}
					else if($(this).children('option:selected').val() == "transcription"){
						trans = $(this).attr("id");
					}
				});

				if(!start || !end || !trans){
					alert("Please precise which field is Timecode start, Timecode end and the transcription.");
				}
				else{
					position_data = {
						timecodestart: start,
						timecodeend: end,
						transcription: trans
					};

					var postdata = {
						filename: name.slice(0, -4),
						content: csv_data,
						type: "csv",
						position: position_data
					};

					launch_download(postdata);
				}
			}
			else{
				alert("Wrong file extension (Only SRT or CSV)")
			}

		}
		else if("{convert}" == "import"){
			var ok = false;
			var timecodestart_col;
			var timecodeend_col;
			var transcription_col;
			var character_col;

			if(srt_data!=null || detx_data !=null){
				if($("select[name=lang]").val()==""){
					$.notification({
						content: "You need to select the transcription language !",
						timeout: 10000
					});
				}
				else {
					ok = true;
					timecodestart_col = 0;
					timecodeend_col = 1;
					transcription_col = 2;
					character_col = detx_data!=null?3:-1;
				}
			}
			else if(csv_data!=null){
				if($("select option[value=timecodestart]:selected").length + $("select option[value=transcription]:selected").length < 2 || $("select[name=lang]").val()==""){
					$.notification({
						content: "You need to select the 2 required fields and the transcription language!",
						timeout: 10000
					});
				}
				else {
					ok = true;
					timecodestart_col = $("select option[value=timecodestart]:selected").parent().attr("id");
					transcription_col = $("select option[value=transcription]:selected").parent().attr("id");

					if($("select option[value=timecodeend]:selected").length==1) {
						timecodeend_col = $("select option[value=timecodeend]:selected").parent().attr("id");
					}
					else {
						timecodeend_col = -1;
					}

					if($("select option[value=character]:selected") != undefined) {
						character_col = $("select option[value=character]:selected").parent().attr("id");
					}
					else {
						character_col = -1;
					}
				}
			}

			if(ok && csv_data != null){
				$(this).html("Loading...");

				var transcription_lang = $("select[name=lang]").val();
				send_data(timecodestart_col, timecodeend_col, transcription_col, character_col, transcription_lang, csv_data);
			}
		}
	});
});

</script>
{/custom_js}
